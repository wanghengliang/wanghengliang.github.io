<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>hengliang</title>
    <description>快乐地创造和品味生活</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 15 Dec 2020 14:11:57 +0800</pubDate>
    <lastBuildDate>Tue, 15 Dec 2020 14:11:57 +0800</lastBuildDate>
    <generator>Jekyll v4.1.1</generator>
    
      <item>
        <title>MySQL安全相关配置</title>
        <description>&lt;p&gt;MySQL安全相关配置&lt;/p&gt;

&lt;h3 id=&quot;mysql设置密码复杂度&quot;&gt;MySQL设置密码复杂度&lt;/h3&gt;

&lt;p&gt;MySQL5.6.6版本之后增加了密码强度验证插件validate_password，相关参数设置的较为严格。使用了该插件会检查设置的密码是否符合当前设置的强度规则，若不满足则拒绝设置。&lt;/p&gt;

&lt;p&gt;MySQL默认没有安装这个插件，我们可以通过如下方式查看&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-mysql&quot;&gt;SELECT * from mysql.`plugin`
# 或者
show plugin;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;安装插件&quot;&gt;安装插件&lt;/h4&gt;

&lt;p&gt;查看插件文件存放位置&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SHOW GLOBAL VARIABLES LIKE 'plugin_dir';
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;一般情况是在mysql安装路径下的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lib/plugin&lt;/code&gt;目录，完整安装版默认是带有插件文件&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;validate_password.dll&lt;/code&gt;的,如没有需要先将插件文件放入改目录下后再进行安装操作。&lt;/p&gt;

&lt;p&gt;安装插件&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-mysql&quot;&gt;-- 添加
INSTALL PLUGIN validate_password SONAME 'validate_password.dll';

-- 卸载
UNINSTALL PLUGIN validate_password；
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;查看默认策略&quot;&gt;查看默认策略&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&quot;language-mysql&quot;&gt;show variables like 'validate_password%';
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;修改策略&quot;&gt;修改策略&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&quot;language-mysql&quot;&gt;-- 将策略要求置为LOW，长度要求置为1
set global validate_password_policy=0;
set global validate_password_length=1;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;各参数说明&quot;&gt;各参数说明&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;validate_password_policy：密码安全策略，默认MEDIUM策略&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;策略&lt;/th&gt;
      &lt;th&gt;检查规则&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;0 or LOW&lt;/td&gt;
      &lt;td&gt;长度&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1 or MEDIUM&lt;/td&gt;
      &lt;td&gt;长度；数字，字母大小写，特殊符号；&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2 or STRONG&lt;/td&gt;
      &lt;td&gt;长度；数字，字母大小写，特殊符号；密码策略文件&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;validate_password_dictionary_file：密码策略文件，策略为STRONG才需要&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;validate_password_length：密码最少长度&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;validate_password_mixed_case_count：大小写字符长度，至少1个&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;validate_password_number_count ：数字至少1个&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;validate_password_special_char_count：特殊字符至少1个&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;mysql添加审计功能&quot;&gt;MySQL添加审计功能&lt;/h3&gt;

&lt;p&gt;mysql的审计功能，主要可以记录下对数据库的所有操作，包括登录、连接、对表的增删改查等，便于责任追溯，问题查找，当然一定方面也会影响数据库效率。&lt;/p&gt;

&lt;h4 id=&quot;获取审计插件&quot;&gt;获取审计插件&lt;/h4&gt;

&lt;p&gt;获取插件并将其拷贝到到自己的mysql插件库下（位置参考上面validate_password说明），审计的插件的主要有以下三个：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;McAfee MySQL Audit Plugin&lt;/strong&gt;：&lt;a href=&quot;https://github.com/mcafee/mysql-audit/releases&quot;&gt;源码&lt;/a&gt;，&lt;a href=&quot;https://bintray.com/mcafee/mysql-audit-plugin/release/&quot;&gt;编译好的二进制文件&lt;/a&gt; 只有linux版本，不知怎么编译出windows版本。
&lt;strong&gt;Percona Audit Log Plugin&lt;/strong&gt;：&lt;a href=&quot;https://www.percona.com/doc/percona-server/5.5/management/audit_log_plugin.html&quot;&gt;地址&lt;/a&gt;：不了解
&lt;strong&gt;MariaDB Audit Plugin&lt;/strong&gt;：&lt;a href=&quot;https://downloads.mariadb.org/mariadb/+releases/&quot;&gt;下载地址&lt;/a&gt;：MariaDB版本自带审计功能插件，所有可以通过MariaDB官网下载对应版本（版本对应很重要，不然安装会失败，成功了也可能导致数据库崩溃）的安装包，从安装包中获得版本对应的.dll插件（linux系统.so插件），拷贝到到自己的mysql插件库下，安装插件，开启审计功能，配置my.ini文件。&lt;/p&gt;

&lt;h4 id=&quot;安装审计插件&quot;&gt;安装审计插件&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&quot;language-mysql&quot;&gt;-- 	安装
INSTALL PLUGIN server_audit SONAME 'server_audit.dll';
-- 卸载
UNINSTALL PLUGIN server_audit;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;查看参数配置&quot;&gt;查看参数配置&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&quot;language-MYSQL&quot;&gt;show variables like '%audit%';
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;修改参数&quot;&gt;修改参数&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&quot;language-MYSQL&quot;&gt;-- 备注：指定哪些操作被记录到日志文件中
set global server_audit_events='CONNECT,QUERY,TABLE,QUERY_DDL'

-- 备注：开启审计功能
set global server_audit_logging=on

-- 备注：默认存放路径，可以不写，默认到data文件下
set global server_audit_file_path =/data/mysql/auditlogs/

-- 备注：设置文件大小
set global server_audit_file_rotate_size=200000000

-- 指定日志文件的数量，如果为0日志将从不轮转
set global server_audit_file_rotations=200

-- 强制日志文件轮转
set global server_audit_file_rotate_now=ON
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;各个参数说明&quot;&gt;各个参数说明&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;server_audit_output_type：指定日志输出类型，可为SYSLOG或FILE&lt;/li&gt;
  &lt;li&gt;server_audit_logging：启动或关闭审计&lt;/li&gt;
  &lt;li&gt;server_audit_events：指定记录事件的类型，可以用逗号分隔的多个值(connect,query,table)，如果开启了查询缓存(query cache)，查询直接从查询缓存返回数据，将没有table记录&lt;/li&gt;
  &lt;li&gt;server_audit_file_path：如server_audit_output_type为FILE，使用该变量设置存储日志的文件，可以指定目录，默认存放在数据目录的server_audit.log文件中&lt;/li&gt;
  &lt;li&gt;server_audit_file_rotate_size：限制日志文件的大小&lt;/li&gt;
  &lt;li&gt;server_audit_file_rotations：指定日志文件的数量，如果为0日志将从不轮&lt;/li&gt;
  &lt;li&gt;server_audit_file_rotate_now：强制日志文件轮转&lt;/li&gt;
  &lt;li&gt;server_audit_incl_users：指定哪些用户的活动将记录，connect将不受此变量影响，该变量比server_audit_excl_users优先级高&lt;/li&gt;
  &lt;li&gt;server_audit_syslog_facility：默认为LOG_USER，指定facility&lt;/li&gt;
  &lt;li&gt;server_audit_syslog_ident：设置ident，作为每个syslog记录的一部分&lt;/li&gt;
  &lt;li&gt;server_audit_syslog_info：指定的info字符串将添加到syslog记录&lt;/li&gt;
  &lt;li&gt;server_audit_syslog_priority：定义记录日志的syslogd priority&lt;/li&gt;
  &lt;li&gt;server_audit_excl_users：该列表的用户行为将不记录，connect将不受该设置影响&lt;/li&gt;
  &lt;li&gt;server_audit_mode：标识版本，用于开发测试&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Fri, 04 Dec 2020 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2020/12/mysql_safe_config/</link>
        <guid isPermaLink="true">http://localhost:4000/2020/12/mysql_safe_config/</guid>
        
        <category>MySQL</category>
        
        
        <category>database</category>
        
      </item>
    
      <item>
        <title>APP、软件版本号的命名规范与原则</title>
        <description>&lt;p&gt;软件版本号的命名规范与原则&lt;/p&gt;

&lt;h3 id=&quot;版本号的命名规范与原则&quot;&gt;版本号的命名规范与原则&lt;/h3&gt;

&lt;p&gt;软件版本号有四部分组成：&lt;/p&gt;

&lt;主版本号.&gt;&lt;子版本号&gt;.&lt;阶段版本号&gt;.&lt;日期版本号加希腊字母版本号&gt;

* 主版本号：当功能模块有较大的变动，比如增加多个模块或者整体架构发生变化。
* 子版本号：当功能有一定的增加或变化。
* 阶段版本号：一般是 Bug 修复或是一些小的变动，要经常发布修订版，时间间隔不限，修复一个严重的bug即可发布一个修订版。
* 日期版本号：用于记录修改项目的当前日期，每天对项目的修改都需要更改日期版本号。

* 希腊字母版本号：此版本号用于标注当前版本的软件处于哪个开发阶段，当软件进入到另一个阶段时需要修改此版本号。共有5种：base、alpha、beta、RC、Release。 例如：1.1.1.161109_beta

通常，完全的版本号定义，分三项： &lt;主版本号.&gt;&lt;子版本号&gt;.&lt;阶段版本号&gt;



### 软件的版本阶段

- Alpha版：也叫α版，此版本主要是以实现软件功能为主，通常只在软件开发者内部交流，一般而言，该版本软件的Bug较多，需要继续修改；
- Beta版：此版本相对于α版已经有了很大的改进，消除了严重的错误，但还是存在着一些缺陷，需要经过多次测试来进一步消除，此版本主要的修改对像是软件的UI；
- RC版 （候选版本(Release Candidate)）：此版本已经相当成熟了，基本上不存在导致错误的BUG，与即将发行的正式版相差无几，测试人员基本通过的版本。
- Release版：此版本意味着“最终版本”、“上线版本”，在前面版本的一系列测试版之后，终归会有一个正式版本，是最终交付用户使用的一个版本。该版本有时也称为标准版。一般情况下，Release不会以单词形式出现在软件封面上，取而代之的是符号(R)；

&lt;/阶段版本号&gt;&lt;/子版本号&gt;&lt;/主版本号.&gt;&lt;/日期版本号加希腊字母版本号&gt;&lt;/阶段版本号&gt;&lt;/子版本号&gt;&lt;/主版本号.&gt;
</description>
        <pubDate>Wed, 29 Jul 2020 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2020/07/software_version/</link>
        <guid isPermaLink="true">http://localhost:4000/2020/07/software_version/</guid>
        
        
      </item>
    
      <item>
        <title>kubernetes部署安装</title>
        <description>&lt;p&gt;kubernetes部署安装&lt;/p&gt;

</description>
        <pubDate>Mon, 08 Jun 2020 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2020/06/k8s-install/</link>
        <guid isPermaLink="true">http://localhost:4000/2020/06/k8s-install/</guid>
        
        <category>kubernetes</category>
        
        
        <category>k8s</category>
        
      </item>
    
      <item>
        <title>IntelliJ插件开发</title>
        <description>&lt;p&gt;IntelliJ插件开发&lt;/p&gt;

&lt;h3 id=&quot;插件开发准备&quot;&gt;插件开发准备&lt;/h3&gt;

&lt;h4 id=&quot;gradle安装&quot;&gt;gradle安装&lt;/h4&gt;

&lt;h4 id=&quot;sdk下载&quot;&gt;sdk下载&lt;/h4&gt;

&lt;p&gt;下载地址（不同版本直接在后面的版本号），建议使用迅雷先下载：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://cache-redirector.jetbrains.com/www.jetbrains.com/intellij-repository/releases/com/jetbrains/intellij/idea/ideaIC/2019.3.3/ideaIC-2019.3.3.zip&quot;&gt;ideaIC-2019.3.3.zip&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://cache-redirector.jetbrains.com/www.jetbrains.com/intellij-repository/releases/com/jetbrains/intellij/idea/ideaIC/2020.1.1/ideaIC-2020.1.1.zip&quot;&gt;ideaIC-2020.1.1.zip&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;下载后安装到本地maven仓库&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;## 注意修改路径到你的真实路径&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mvn &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt;:install-file &lt;span class=&quot;nt&quot;&gt;-Dfile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/plugins/sdk/ideaIC-2019.3.3.zip&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-DgroupId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;com.jetbrains.intellij.idea &lt;span class=&quot;nt&quot;&gt;-DartifactId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ideaIC &lt;span class=&quot;nt&quot;&gt;-Dpackaging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;zip &lt;span class=&quot;nt&quot;&gt;-Dversion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;2019.3.3 &lt;span class=&quot;nt&quot;&gt;-DgeneratePom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mvn &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt;:install-file &lt;span class=&quot;nt&quot;&gt;-Dfile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/plugins/sdk/ideaIC-2020.1.1.zip&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-DgroupId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;com.jetbrains.intellij.idea &lt;span class=&quot;nt&quot;&gt;-DartifactId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ideaIC &lt;span class=&quot;nt&quot;&gt;-Dpackaging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;zip &lt;span class=&quot;nt&quot;&gt;-Dversion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;2020.1.1 &lt;span class=&quot;nt&quot;&gt;-DgeneratePom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
        <pubDate>Fri, 05 Jun 2020 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2020/06/intellij_plugin/</link>
        <guid isPermaLink="true">http://localhost:4000/2020/06/intellij_plugin/</guid>
        
        <category>IntelliJIDEA</category>
        
        <category>plugin</category>
        
        
      </item>
    
      <item>
        <title>Harbor安装</title>
        <description>&lt;p&gt;利用Harbor搭建docker 私有仓库&lt;/p&gt;

&lt;h3 id=&quot;下载harbor&quot;&gt;下载harbor&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/goharbor/harbor&quot;&gt;harbor github 地址&lt;/a&gt;
直接下载编译好的包&lt;a href=&quot;https://github.com/goharbor/harbor/releases&quot;&gt;下载地址&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;包括有两个包&lt;strong&gt;Harbor offline installer&lt;/strong&gt; 和 &lt;strong&gt;Harbor online installer&lt;/strong&gt;，此处下载offline版本。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Online installer :&lt;/strong&gt; 在线安装版直接从DockerHub下载Harbor镜像。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Offline installer :&lt;/strong&gt; 如果部署Harbor的主机不能联网可选择离线安装版，离线安装版包括Harbor镜像文件。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;解压安装harbor&quot;&gt;解压安装harbor&lt;/h3&gt;

&lt;p&gt;解压安装包&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#使用tar命令解压到/usr/local/目录下
tar -zxvf harbor-online-installer-v1.10.2.tgz -C /usr/local/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;安装harbor&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cd /usr/local/harbor
## 编辑harbor的配置文件
$ vi harbor.yml
	#修改以下内容
	hostname = 192.168.159.134 #修改harbor的启动ip，这里需要依据系统ip设置
	port: 80 #harbor的端口,有两个端口,http协议(80)和https协议(443)
	harbor_admin_password = admin #修改harbor的admin用户的密码
	data_volume: /data/harbor	#修改harbor存储位置
	#注释掉https配置，包括端口及证书路径
	# https:
	#   port: 443
	#   certificate: /your/certificate/path
  #   private_key: /your/private/key/path
  
$ ./prepare #配置Harbor
$ ./install.sh #安装Harbor
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;配置harbor&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;## 设置Harbor开机启动
$ vi /lib/systemd/system/harbor.service

[Unit]
Description=Harbor
After=docker.service systemd-networkd.service systemd-resolved.service
Requires=docker.service
Documentation=http://github.com/vmware/harbor

[Service]
Type=simple
Restart=on-failure
RestartSec=5
#需要注意harbor的安装位置
ExecStart=/usr/bin/docker-compose -f  /usr/local/harbor/docker-compose.yml up
ExecStop=/usr/bin/docker-compose -f /usr/local/harbor/docker-compose.yml down	

[Install]
WantedBy=multi-user.target

$ systemctl enable harbor
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;开放2375端口&lt;/p&gt;

&lt;p&gt;注意:在外网开放有安全风险，只推荐在内网对外开放&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ vi /lib/systemd/system/docker.service
## 修改[Service]节点，增加 -H tcp://0.0.0.0:2375
ExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2375 -H unix://var/run/docker.sock

$ systemctl daemon-reload
$ systemctl restart docker
$ systemctl restart harbor
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;harbor操作说明&quot;&gt;harbor操作说明&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;## 关闭harbor服务
$ docker-compose down -v

## 启动Harbor服务
$ docker-compose up -d

## 重启harbor
$ docker-compose down -v &amp;amp;&amp;amp; docker-compose up -d

## 常用debug方式
## 查看docker程序的配置信息
$ docker info  
## 查看harbor相关的容器信息
$ docker-compose ps

## 注意：如果更改了harbor.yml文件，必须要重新执行install脚本,或者执行./prepare脚本，生成新的配置文件；
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;harbor测试&quot;&gt;harbor测试&lt;/h3&gt;

&lt;p&gt;修改docker配置文件，使docker支持harbor&lt;/p&gt;

&lt;p&gt;编辑客户机&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/docker/daemon.json&lt;/code&gt;文件&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ vi /etc/docker/daemon.json
{ &quot;insecure-registries&quot;: [ &quot;192.168.159.134&quot; ] }

$ systemctl daemon-reload &amp;amp;&amp;amp; systemctl restart docker

$ docker login 192.168.159.134
Username: admin
Password:
Login Succeeded
$ docker pull 192.168.159.134/blade/demo:latest

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;附-virtualbox虚拟机增加磁盘空间&quot;&gt;附: VirtualBox虚拟机增加磁盘空间&lt;/h3&gt;

&lt;p&gt;之前采用默认分配了8G空间，后来发现空间不够，需增加磁盘空间，方法如下：&lt;/p&gt;

&lt;p&gt;修改磁盘大小，停掉虚拟机，在VirtualBox设置-存储中查看磁盘位置，通过VBoxManage命令修改磁盘大小&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;## 增加磁盘空间到20G，resize参数单位为M，20G=20480M
$ VBoxManage modifyhd /Volumes/wd/vbox/harbor/harbor-disk1.vdi --resize 20480
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;扩容核心操作，启动虚拟机并进入，执行下面命令&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-------------------------------------------------------------------------
[root@harbor ~]# fdisk -l

磁盘 /dev/sda：21.5 GB, 21474836480 字节，41943040 个扇区
Units = 扇区 of 1 * 512 = 512 bytes
扇区大小(逻辑/物理)：512 字节 / 512 字节
I/O 大小(最小/最佳)：512 字节 / 512 字节
磁盘标签类型：dos
磁盘标识符：0x0003864b

   设备 Boot      Start         End      Blocks   Id  System
/dev/sda1   *        2048     2099199     1048576   83  Linux
/dev/sda2         2099200    16777215     7339008   8e  Linux LVM

磁盘 /dev/mapper/centos-root：6652 MB, 6652166144 字节，12992512 个扇区
Units = 扇区 of 1 * 512 = 512 bytes
扇区大小(逻辑/物理)：512 字节 / 512 字节
I/O 大小(最小/最佳)：512 字节 / 512 字节


磁盘 /dev/mapper/centos-swap：859 MB, 859832320 字节，1679360 个扇区
Units = 扇区 of 1 * 512 = 512 bytes
扇区大小(逻辑/物理)：512 字节 / 512 字节
I/O 大小(最小/最佳)：512 字节 / 512 字节

-------------------------------------------------------------------------
[root@harbor ~]# fdisk /dev/sda
欢迎使用 fdisk (util-linux 2.23.2)。

更改将停留在内存中，直到您决定将更改写入磁盘。
使用写入命令前请三思。

命令(输入 m 获取帮助)：m
命令操作
   a   toggle a bootable flag
   b   edit bsd disklabel
   c   toggle the dos compatibility flag
   d   delete a partition
   g   create a new empty GPT partition table
   G   create an IRIX (SGI) partition table
   l   list known partition types
   m   print this menu
   n   add a new partition
   o   create a new empty DOS partition table
   p   print the partition table
   q   quit without saving changes
   s   create a new empty Sun disklabel
   t   change a partition's system id
   u   change display/entry units
   v   verify the partition table
   w   write table to disk and exit
   x   extra functionality (experts only)

命令(输入 m 获取帮助)：n
Partition type:
   p   primary (2 primary, 0 extended, 2 free)
   e   extended
Select (default p): p
分区号 (3,4，默认 3)：3
起始 扇区 (16777216-41943039，默认为 16777216)：
将使用默认值 16777216
Last 扇区, +扇区 or +size{K,M,G} (16777216-41943039，默认为 41943039)：
将使用默认值 41943039
分区 3 已设置为 Linux 类型，大小设为 12 GiB

命令(输入 m 获取帮助)：t
分区号 (1-3，默认 3)：3
Hex 代码(输入 L 列出所有代码)：l

 0  空              24  NEC DOS         81  Minix / 旧 Linu bf  Solaris
 1  FAT12           27  隐藏的 NTFS Win 82  Linux 交换 / So c1  DRDOS/sec (FAT-
 2  XENIX root      39  Plan 9          83  Linux           c4  DRDOS/sec (FAT-
 3  XENIX usr       3c  PartitionMagic  84  OS/2 隐藏的 C:  c6  DRDOS/sec (FAT-
 4  FAT16 &amp;lt;32M      40  Venix 80286     85  Linux 扩展      c7  Syrinx
 5  扩展            41  PPC PReP Boot   86  NTFS 卷集       da  非文件系统数据
 6  FAT16           42  SFS             87  NTFS 卷集       db  CP/M / CTOS / .
 7  HPFS/NTFS/exFAT 4d  QNX4.x          88  Linux 纯文本    de  Dell 工具
 8  AIX             4e  QNX4.x 第2部分  8e  Linux LVM       df  BootIt
 9  AIX 可启动      4f  QNX4.x 第3部分  93  Amoeba          e1  DOS 访问
 a  OS/2 启动管理器 50  OnTrack DM      94  Amoeba BBT      e3  DOS R/O
 b  W95 FAT32       51  OnTrack DM6 Aux 9f  BSD/OS          e4  SpeedStor
 c  W95 FAT32 (LBA) 52  CP/M            a0  IBM Thinkpad 休 eb  BeOS fs
 e  W95 FAT16 (LBA) 53  OnTrack DM6 Aux a5  FreeBSD         ee  GPT
 f  W95 扩展 (LBA)  54  OnTrackDM6      a6  OpenBSD         ef  EFI (FAT-12/16/
10  OPUS            55  EZ-Drive        a7  NeXTSTEP        f0  Linux/PA-RISC
11  隐藏的 FAT12    56  Golden Bow      a8  Darwin UFS      f1  SpeedStor
12  Compaq 诊断     5c  Priam Edisk     a9  NetBSD          f4  SpeedStor
14  隐藏的 FAT16 &amp;lt;3 61  SpeedStor       ab  Darwin 启动     f2  DOS 次要
16  隐藏的 FAT16    63  GNU HURD or Sys af  HFS / HFS+      fb  VMware VMFS
17  隐藏的 HPFS/NTF 64  Novell Netware  b7  BSDI fs         fc  VMware VMKCORE
18  AST 智能睡眠    65  Novell Netware  b8  BSDI swap       fd  Linux raid 自动
1b  隐藏的 W95 FAT3 70  DiskSecure 多启 bb  Boot Wizard 隐  fe  LANstep
1c  隐藏的 W95 FAT3 75  PC/IX           be  Solaris 启动    ff  BBT
1e  隐藏的 W95 FAT1 80  旧 Minix
Hex 代码(输入 L 列出所有代码)：8e
已将分区“Linux”的类型更改为“Linux LVM”

命令(输入 m 获取帮助)：w
The partition table has been altered!

Calling ioctl() to re-read partition table.

WARNING: Re-reading the partition table failed with error 16: 设备或资源忙.
The kernel still uses the old table. The new table will be used at
the next reboot or after you run partprobe(8) or kpartx(8)
正在同步磁盘。

## 重启后执行sudo fdisk -l查看设备Boot（我的为 /dev/sda3 ）
-------------------------------------------------------------------------
[root@harbor ~]# reboot
[root@harbor ~]# fdisk -l

磁盘 /dev/sda：21.5 GB, 21474836480 字节，41943040 个扇区
Units = 扇区 of 1 * 512 = 512 bytes
扇区大小(逻辑/物理)：512 字节 / 512 字节
I/O 大小(最小/最佳)：512 字节 / 512 字节
磁盘标签类型：dos
磁盘标识符：0x0003864b

   设备 Boot      Start         End      Blocks   Id  System
/dev/sda1   *        2048     2099199     1048576   83  Linux
/dev/sda2         2099200    16777215     7339008   8e  Linux LVM
/dev/sda3        16777216    41943039    12582912   8e  Linux LVM

磁盘 /dev/mapper/centos-root：6652 MB, 6652166144 字节，12992512 个扇区
Units = 扇区 of 1 * 512 = 512 bytes
扇区大小(逻辑/物理)：512 字节 / 512 字节
I/O 大小(最小/最佳)：512 字节 / 512 字节


磁盘 /dev/mapper/centos-swap：859 MB, 859832320 字节，1679360 个扇区
Units = 扇区 of 1 * 512 = 512 bytes
扇区大小(逻辑/物理)：512 字节 / 512 字节
I/O 大小(最小/最佳)：512 字节 / 512 字节

## 将分区格式化为ext4格式
-------------------------------------------------------------------------
[root@harbor ~]# mkfs.ext4 /dev/sda3
mke2fs 1.42.9 (28-Dec-2013)
文件系统标签=
OS type: Linux
块大小=4096 (log=2)
分块大小=4096 (log=2)
Stride=0 blocks, Stripe width=0 blocks
786432 inodes, 3145728 blocks
157286 blocks (5.00%) reserved for the super user
第一个数据块=0
Maximum filesystem blocks=2151677952
96 block groups
32768 blocks per group, 32768 fragments per group
8192 inodes per group
Superblock backups stored on blocks:
	32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632, 2654208

Allocating group tables: 完成
正在写入inode表: 完成
Creating journal (32768 blocks): 完成
Writing superblocks and filesystem accounting information: 完成

## 创建新的物理分区
-------------------------------------------------------------------------
[root@harbor ~]# sudo pvcreate /dev/sda3
WARNING: ext4 signature detected on /dev/sda3 at offset 1080. Wipe it? [y/n]: y
  Wiping ext4 signature on /dev/sda3.
  Physical volume &quot;/dev/sda3&quot; successfully created.
[root@harbor ~]# sudo vgextend centos /dev/sda3
  Volume group &quot;centos&quot; successfully extended


查看LVM信息
1.pvdisplay 查看物理卷
2.vgdisplay 查看虚拟卷
3.lvdisplay 查看逻辑卷
-------------------------------------------------------------------------
[root@harbor ~]# pvdisplay
  --- Physical volume ---
  PV Name               /dev/sda2
  VG Name               centos
  PV Size               &amp;lt;7.00 GiB / not usable 3.00 MiB
  Allocatable           yes (but full)
  PE Size               4.00 MiB
  Total PE              1791
  Free PE               0
  Allocated PE          1791
  PV UUID               jhAzWm-Cbsk-UjUg-328S-Ckk4-IHyQ-e2AnR8

  --- Physical volume ---
  PV Name               /dev/sda3
  VG Name               centos
  PV Size               12.00 GiB / not usable 4.00 MiB
  Allocatable           yes
  PE Size               4.00 MiB
  Total PE              3071
  Free PE               3071
  Allocated PE          0
  PV UUID               DqL9Bo-HC7B-HMde-cG9o-eAXy-MSQ5-fedoxS

查看LVM信息
2.vgdisplay 查看虚拟卷
-------------------------------------------------------------------------
[root@harbor ~]# vgdisplay
  --- Volume group ---
  VG Name               centos
  System ID
  Format                lvm2
  Metadata Areas        2
  Metadata Sequence No  4
  VG Access             read/write
  VG Status             resizable
  MAX LV                0
  Cur LV                2
  Open LV               2
  Max PV                0
  Cur PV                2
  Act PV                2
  VG Size               18.99 GiB
  PE Size               4.00 MiB
  Total PE              4862
  Alloc PE / Size       1791 / &amp;lt;7.00 GiB
  Free  PE / Size       3071 / &amp;lt;12.00 GiB
  VG UUID               Cn32hR-TEcI-Z5zC-Rmrf-cIwI-fUwW-QymcyG

## 扩展到卷 组（centos便是下图中的VG Name）
-------------------------------------------------------------------------
[root@harbor ~]# vgextend centos /dev/sda3
信息缺失。。。

查看LVM信息
3.lvdisplay 查看逻辑卷，根据大小判定/dev/centos/root即是根分区
-------------------------------------------------------------------------
[root@harbor ~]# lvdisplay
  --- Logical volume ---
  LV Path                /dev/centos/swap
  LV Name                swap
  VG Name                centos
  LV UUID                hNLuJD-KQZI-QziE-dXSg-orES-qVqj-gRyX4X
  LV Write Access        read/write
  LV Creation host, time db-mysql, 2020-06-02 16:12:47 +0800
  LV Status              available
  # open                 2
  LV Size                820.00 MiB
  Current LE             205
  Segments               1
  Allocation             inherit
  Read ahead sectors     auto
  - currently set to     8192
  Block device           253:1

  --- Logical volume ---
  LV Path                /dev/centos/root
  LV Name                root
  VG Name                centos
  LV UUID                kE4nqp-3z3Q-JhDB-fBcK-FnYZ-WiFc-fLef6w
  LV Write Access        read/write
  LV Creation host, time db-mysql, 2020-06-02 16:12:48 +0800
  LV Status              available
  # open                 1
  LV Size                &amp;lt;6.20 GiB
  Current LE             1586
  Segments               1
  Allocation             inherit
  Read ahead sectors     auto
  - currently set to     8192
  Block device           253:0
  
-------------------------------------------------------------------------
[root@harbor ~]# lvextend /dev/centos/root /dev/sda3
  Size of logical volume centos/root changed from &amp;lt;6.20 GiB (1586 extents) to 18.19 GiB (4657 extents).
  Logical volume centos/root successfully resized.
[root@harbor ~]# sudo resize2fs /dev/centos/root
resize2fs 1.42.9 (28-Dec-2013)
resize2fs: Bad magic number in super-block 当尝试打开 /dev/centos/root 时
找不到有效的文件系统超级块.


## 刷新逻辑分区容量
##如果报错则是因为你的某些分区使用的是xfs的文件系统，执行 xfs_growfs /dev/centos/root 刷新逻辑分区即可
-------------------------------------------------------------------------
[root@harbor ~]# resize2fs /dev/centos/root

## 刷新逻辑分区
-------------------------------------------------------------------------
[root@harbor ~]# xfs_growfs /dev/centos/root
meta-data=/dev/mapper/centos-root isize=512    agcount=4, agsize=406016 blks
         =                       sectsz=512   attr=2, projid32bit=1
         =                       crc=1        finobt=0 spinodes=0
data     =                       bsize=4096   blocks=1624064, imaxpct=25
         =                       sunit=0      swidth=0 blks
naming   =version 2              bsize=4096   ascii-ci=0 ftype=1
log      =internal               bsize=4096   blocks=2560, version=2
         =                       sectsz=512   sunit=0 blks, lazy-count=1
realtime =none                   extsz=4096   blocks=0, rtextents=0
data blocks changed from 1624064 to 4768768

## 这时执行sudo df -h //会发现根分区容量变大了，恭喜你成功了
-------------------------------------------------------------------------
[root@harbor ~]# df -h
文件系统                 容量  已用  可用 已用% 挂载点
devtmpfs                 485M     0  485M    0% /dev
tmpfs                    496M     0  496M    0% /dev/shm
tmpfs                    496M  6.8M  489M    2% /run
tmpfs                    496M     0  496M    0% /sys/fs/cgroup
/dev/mapper/centos-root   19G  4.8G   14G   26% /
/dev/sda1               1014M  168M  847M   17% /boot
tmpfs                    100M     0  100M    0% /run/user/0

## 最后reboot重启一下便可以啦！
-------------------------------------------------------------------------
[root@harbor ~]# reboot
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
        <pubDate>Wed, 03 Jun 2020 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2020/06/harbor_install/</link>
        <guid isPermaLink="true">http://localhost:4000/2020/06/harbor_install/</guid>
        
        <category>docker</category>
        
        <category>harbor</category>
        
        
      </item>
    
      <item>
        <title>CAS单点登录-客户端搭建</title>
        <description>&lt;p&gt;CAS单点登录-客户端搭建&lt;/p&gt;
</description>
        <pubDate>Wed, 06 May 2020 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2020/05/cas_03_client/</link>
        <guid isPermaLink="true">http://localhost:4000/2020/05/cas_03_client/</guid>
        
        <category>cas</category>
        
        <category>单点登录</category>
        
        <category>SSO</category>
        
        
        <category>cas</category>
        
      </item>
    
      <item>
        <title>CAS单点登录-服务器搭建</title>
        <description>&lt;p&gt;CAS单点登录-服务器搭建&lt;/p&gt;
</description>
        <pubDate>Wed, 06 May 2020 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2020/05/cas_02_server/</link>
        <guid isPermaLink="true">http://localhost:4000/2020/05/cas_02_server/</guid>
        
        <category>cas</category>
        
        <category>单点登录</category>
        
        <category>SSO</category>
        
        
        <category>cas</category>
        
      </item>
    
      <item>
        <title>CAS单点登录-SSO</title>
        <description>&lt;p&gt;CAS单点登录-SSO&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/qq_34021712/category_9278675.html&quot;&gt;“这个名字想了很久”的博客CAS部分&lt;/a&gt;
&lt;a href=&quot;https://blog.csdn.net/yelllowcong/article/details/86250566&quot;&gt;“狂飙的yellowcong”的博客CAS部分&lt;/a&gt;
&lt;a href=&quot;https://blog.csdn.net/Anumbrella/category_7765386.html&quot;&gt;“Anumbrella”的博客CAS部分&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 06 May 2020 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2020/05/cas_01_base/</link>
        <guid isPermaLink="true">http://localhost:4000/2020/05/cas_01_base/</guid>
        
        <category>cas</category>
        
        <category>单点登录</category>
        
        <category>SSO</category>
        
        
        <category>cas</category>
        
      </item>
    
      <item>
        <title>git学习总结</title>
        <description>&lt;p&gt;git学习总结&lt;/p&gt;

&lt;h3 id=&quot;git是什么&quot;&gt;Git是什么？&lt;/h3&gt;

&lt;h4 id=&quot;git的特点&quot;&gt;git的特点&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;有助于分布式开发&lt;/strong&gt;：git允许并行开发，各人可以在自己的版本库中独立且同时开发，不需要与一个中心版本时刻同步。允许许多开发者在不同的地方甚至离线的情况无障碍的开发&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;能够胜任上千开发人员的规模&lt;/strong&gt;：支持上千开发人员规模的VCS(Version Control System)版本控制系统&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;性能优异&lt;/strong&gt;：快速且高效，使用“压缩”和“差异比较”技术节约存储空间，进而节约传输时间。使用分布式开发模型，而非集中式开发模型，确保了网络不确定因素不会影响到日常开发的效率。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;保持完整性和可靠性&lt;/strong&gt;：git采用了一个叫做“安全散列函数”(SHA1)的通用加密散列函数来命名和识别数据库中的对象。虽然理论上不是绝对的，但是在实践中已经证实这是足够可靠的方式。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;强化责任&lt;/strong&gt;：git对每个有文件改动的提交强制使用“改动日志”。进而可对所有的改动进行责任最终。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;不可变性&lt;/strong&gt;：git版本库中存储的对象均为不可变的。一点创建数据对象并把他存储到数据库中，它们便不可修改。这样的好处很多如快速比较相同性。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;原子事务&lt;/strong&gt;：git通过记录完整、离散的版本库状态来实现原子事务。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;支持并鼓励基于分支的开发&lt;/strong&gt;：git支持分支开发，并提供了一个简单、清晰、快速的合并功能。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;完整的版本库&lt;/strong&gt;：每个人的版本库中都有一份关于每个文件的完整历史修订信息。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;一个清晰的内部设计&lt;/strong&gt;：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;免费自由&lt;/strong&gt;：be free ,as in freedom.&lt;/p&gt;

&lt;h4 id=&quot;git快速入门&quot;&gt;git快速入门&lt;/h4&gt;

&lt;h5 id=&quot;git安装&quot;&gt;git安装&lt;/h5&gt;

&lt;p&gt;到&lt;a href=&quot;https://git-scm.com/download&quot;&gt;git官方网站&lt;/a&gt;上下载软件进行安装即可。&lt;/p&gt;

&lt;h5 id=&quot;git配置&quot;&gt;git配置&lt;/h5&gt;

&lt;p&gt;git自带一个config工具，首次安装好git后，可通过此工具设置控制 Git 外观和行为的配置变量。这些变量存储在三个不同的位置：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/gitconfig&lt;/code&gt; 文件: 包含系统上每一个用户及他们仓库的通用配置。如果在执行 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git config&lt;/code&gt; 时带上 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--system&lt;/code&gt; 选项，那么它就会读写该文件中的配置变量。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/.gitconfig&lt;/code&gt; 或 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/.config/git/config&lt;/code&gt; 文件：只针对当前用户。你可以传递 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--global&lt;/code&gt; 选项让 Git 读写此文件，这会对你系统上 &lt;strong&gt;所有&lt;/strong&gt; 的仓库生效。&lt;/li&gt;
  &lt;li&gt;当前使用仓库的 Git 目录中的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config&lt;/code&gt; 文件（即 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.git/config&lt;/code&gt;）：针对该仓库。 你可以传递 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--local&lt;/code&gt; 选项让 Git 强制读写此文件，虽然默认情况下用的就是它。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;优先级顺序为： &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.git/config&lt;/code&gt; &amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/.gitconfig&lt;/code&gt;  &amp;gt;  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/gitconfig&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;配置用户信息&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;…&lt;/p&gt;

&lt;h3 id=&quot;git基本概念&quot;&gt;Git基本概念&lt;/h3&gt;

&lt;p&gt;Git版本库不仅仅提供版本库中所有文件的完整副本，还提供 版本库本身的副本。在版本库中，Git维护两个主要的数据结构:对象库(object store)和 索引(index)。所有这些版本库数据存放在工作目录根目录下一个名 为&lt;strong&gt;.git&lt;/strong&gt; 的隐藏子目录中。&lt;/p&gt;

&lt;h4 id=&quot;git对象类型&quot;&gt;git对象类型&lt;/h4&gt;

&lt;p&gt;对象库是Git版本库实现的心脏。它包含你的原始数据文件和所有日志 消息、作者信息、日期，以及其他用来重建项目任意版本或分支的信息。&lt;/p&gt;

&lt;p&gt;Git放在对象库里的对象只有4种类型:&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;块(blob)&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;目录树(tree)&lt;/code&gt;、 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;提交(commit)&lt;/code&gt;和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;标签(tag)&lt;/code&gt;。这4种原子对象构成Git高层数据结构的基 础。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;块(blob)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;文件的每一个版本表示为一个块(blob)。一个blob保存一个文件的数据，但不包含任何关于 这个文件的元数据，甚至连文件名也没有。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;目录树(tree)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;一个目录树(tree)对象代表一层目录信息。它记录blob标识符、路径名和在一个目录里所有文件的一些元数据。它也可以递归引用其他目录树或子树对象，从而建立一个包含文件和子目录的完整层次结构。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;提交(commit)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;一个提交(commit)对象保存版本库中每一次变化的元数据，包括作者、提交者、提交日期和日志消息。每一个提交对象指向一个目录树对象，这个目录树对象在一张完整的快照中捕获提交时版本库的状态。最初的提交或者根提交(root commit)是没有父提交的。大多数提交都有一个父提交。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;标签(tag)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;一个标签对象分配一个任意的且人类可读的名字给一个特定对象，通常是一个提交对象。虽然9da581d910c9c4ac93557ca4859e767f5caf5169指的 是一个确切且定义好的提交，但是一个更熟悉的标签名(如Ver-1.0- Alpha)可能会更有意义!&lt;/p&gt;

&lt;p&gt;随着时间的推移，所有信息在对象库中会变化和增长，项目的编辑、 添加和删除都会被跟踪和建模。为了有效地利用磁盘空间和网络带宽，Git 把对象压缩并存储在打包文件(pack file)里，这些文件也在对象库里。&lt;/p&gt;

&lt;p&gt;这里会用一个简单的例子让大家直观感受一下git是怎么储存信息的。&lt;/p&gt;

&lt;p&gt;首先初始化一个git版本库&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git init
&lt;span class=&quot;c&quot;&gt;## 初始化后会生成git对象库信息,但是没有对象信息&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ll .git
total 24
&lt;span class=&quot;nt&quot;&gt;-rw-r--r--&lt;/span&gt;   1 hengliang  staff    23B  9 25 10:25 HEAD
drwxr-xr-x   2 hengliang  staff    64B  9 25 10:25 branches
&lt;span class=&quot;nt&quot;&gt;-rw-r--r--&lt;/span&gt;   1 hengliang  staff   137B  9 25 10:25 config
&lt;span class=&quot;nt&quot;&gt;-rw-r--r--&lt;/span&gt;   1 hengliang  staff    73B  9 25 10:25 description
drwxr-xr-x  12 hengliang  staff   384B  9 25 10:25 hooks
drwxr-xr-x   3 hengliang  staff    96B  9 25 10:25 info
drwxr-xr-x   4 hengliang  staff   128B  9 25 10:25 objects
drwxr-xr-x   4 hengliang  staff   128B  9 25 10:25 refs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;我们先创建两个文件&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'111'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; a.txt
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'222'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; b.txt
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git add &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.txt
&lt;span class=&quot;c&quot;&gt;## 执行add命令后，仓库里面多了2个object&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tree .git/objects
.git/objects
├── 58
│   └── c9bdf9d017fcd178dc8c073cbfcbb7ff240d6c
├── c2
│   └── 00906efd24ec5e783bee7f23b5d7c941b0c12c
├── info
└── pack
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;通过&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git cat-file&lt;/code&gt; 命令查看文件类型和内容,这里我们遇到第一种Git object，blob类型，它只储存的是一个文件的内容，不包括文件名等其他信息。然后将这些信息经过SHA1哈希算法得到对应的哈希值58c9bdf9d017fcd178dc8c073cbfcbb7ff240d6c，作为这个object在Git仓库中的唯一身份证。&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;## git cat-file -t 可以查看object的类型&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git cat-file &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; 58c9
blob
&lt;span class=&quot;c&quot;&gt;## git cat-file -p可以查看object储存的具体内容&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git cat-file &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 58c9
111
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;现在我们提交一下刚刚创建的两个文件&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git commit &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;feat:增加连个文件a.txt和b.txt&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;master &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;root-commit&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 49ac3b9] feat:增加连个文件a.txt和b.txt
 2 files changed, 2 insertions&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;+&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
 create mode 100644 a.txt
 create mode 100644 b.txt

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tree .git/objects
.git/objects
├── 49
│   └── ac3b91f06b197d6663859ea4deef2c9ddd49ee
├── 4c
│   └── aaa1a9ae0b274fba9e3675f9ef071616e5b209
├── 58
│   └── c9bdf9d017fcd178dc8c073cbfcbb7ff240d6c
├── c2
│   └── 00906efd24ec5e783bee7f23b5d7c941b0c12c
├── info
└── pack

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;当我们commit完成之后，Git仓库里面多出来两个object。同样使用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cat-file&lt;/code&gt;命令，我们看看它们分别是什么类型以及具体的内容是什么。&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git cat-file &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; 4caa
tree
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git cat-file &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 4caa
100644 blob 58c9bdf9d017fcd178dc8c073cbfcbb7ff240d6c	a.txt
100644 blob c200906efd24ec5e783bee7f23b5d7c941b0c12c	b.txt

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git cat-file &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; 49ac
commit
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git cat-file &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 49ac
tree 4caaa1a9ae0b274fba9e3675f9ef071616e5b209
author hengliang &amp;lt;wanghengliang@outlook.com&amp;gt; 1601002121 +0800
committer hengliang &amp;lt;wanghengliang@outlook.com&amp;gt; 1601002121 +0800

feat:增加两个文件a.txt和b.txt

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;4caa为tree、49ac为commit，再看他们的内容发现&lt;/p&gt;

&lt;p&gt;tree储存了一个目录结构（类似于文件夹），以及每一个文件（或者子文件夹）的权限、类型、对应的身份证（SHA1值）、以及文件名，如果提交文件带目录则目录也是一个tree。&lt;/p&gt;

&lt;p&gt;commit则包含了tree哈希值和提交信息（提交的作者、提交的具体时间和提交的说明信息）。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;再看看平常接触的分支信息储存在哪里呢？在Git仓库里面，HEAD、分支、普通的Tag可以简单的理解成是一个指针，指向对应commit的SHA1值。&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; .git/HEAD
ref: refs/heads/master
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; .git/refs/heads/master
49ac3b91f06b197d6663859ea4deef2c9ddd49ee
&lt;span class=&quot;c&quot;&gt;## 新建一个dev分支&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git branch dev
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; .git/refs/heads/dev
49ac3b91f06b197d6663859ea4deef2c9ddd49ee
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;另起一个Git项目看看带目录的情况&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git init
$ mkdir d1
$ echo &quot;123&quot; &amp;gt; d1/a1.txt
$ git add .
$ git commit -m &quot;feat:增加带文件夹内容的提交&quot;
$ tree .git/objects
.git/objects
├── 19
│   └── 0a18037c64c43e6b11489df4bf0b9eb6d2c9bf
├── 69
│   └── 700c8f3321a65f7499f3198b3ebbbc1f8fa658
├── 7d
│   └── 9ddec14e8e3ca23de8746f11bd6bf58f9ec541
├── dd
│   └── d4d0b0bcd7db4f1b1a0527d124d72188fbfec8
├── info
└── pack
$ cat .git/HEAD
ref: refs/heads/master
$ cat .git/refs/heads/master
7d9ddec14e8e3ca23de8746f11bd6bf58f9ec541
$ git cat-file -p 7d9d
tree 69700c8f3321a65f7499f3198b3ebbbc1f8fa658
author hengliang &amp;lt;wanghengliang@outlook.com&amp;gt; 1601184377 +0800
committer hengliang &amp;lt;wanghengliang@outlook.com&amp;gt; 1601184377 +0800

feat:增加带文件夹内容的提交
$ git cat-file -p 6970
040000 tree ddd4d0b0bcd7db4f1b1a0527d124d72188fbfec8	d1
$ git cat-file -p ddd4
100644 blob 190a18037c64c43e6b11489df4bf0b9eb6d2c9bf	a1.txt
$ git cat-file -p 190a
123
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;现在已经知道了前三种对象类型，最后再简单看看&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;标签(tag)&lt;/code&gt;,其实和前三种相似。&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git tag &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt; v1.0 &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;第一个版本&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; .git/refs/tags/v1.0
d809be2a64963ad60fbcb05564bd7cc59bff3ca9
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git cat-file &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; d809
tag
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git cat-file &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; d809
object 49ac3b91f06b197d6663859ea4deef2c9ddd49ee
&lt;span class=&quot;nb&quot;&gt;type &lt;/span&gt;commit
tag v1.0
tagger hengliang &amp;lt;wanghengliang@outlook.com&amp;gt; 1601172803 +0800

第一个版本
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;此时的仓库用图形可视化表示看上去像这样&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://wanghengliang.cn/images/posts/git/git_summary_01.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;git的三个分区&quot;&gt;Git的三个分区&lt;/h4&gt;

&lt;p&gt;Git分为三个分区，分别为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;工作目录&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;索引区域&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Git仓库&lt;/code&gt;。接下来我们一起了解这三个分区和Git链的内部原理。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;工作目录(working directory)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;操作系统上的文件，所有代码开发编辑都在这上面完成。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;索引区域(index or staging area)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;索引是一个临时的、动态的二进制文件，它描述整个版本库的目录结 构。更具体地说，索引捕获项目在某个时刻的整体结构的一个版本。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Git仓库(git repository)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;由Git object记录着每一次提交的快照，以及链式结构记录的提交变更历史。&lt;/p&gt;

&lt;p&gt;接着上面的例子，目前的仓库状态如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://wanghengliang.cn/images/posts/git/git_summary_02.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;修改一个文件，修改文件是在工作目录完成（动态来自于网络，其中的哈希值可能无法完全对应）&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ echo &quot;333&quot; &amp;gt; a.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;http://wanghengliang.cn/images/posts/git/git_summary_update_file.gif&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;添加到索引,当使用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git add&lt;/code&gt;命令时，&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Git会给添加的每个文件的内容创建一 个对象，但它并不会马上为树创建一个对象。&lt;/li&gt;
  &lt;li&gt;更新索引。索引位于&lt;strong&gt;.git/index&lt;/strong&gt; 中，它跟踪文件的路径名和相应的blob。每次执行命令(比 如，git add、git rm或者git mv)的时候，Git会用新的路径名和blob信息来 更新索引。查看索引文件内容可以用命令&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git ls-files -s&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git ls-files &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt;
100644 58c9bdf9d017fcd178dc8c073cbfcbb7ff240d6c 0	a.txt
100644 c200906efd24ec5e783bee7f23b5d7c941b0c12c 0	b.txt
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git add a.txt
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git ls-files &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt;
100644 55bd0ac4c42e46cd751eb7405e12a35e61425550 0	a.txt
100644 c200906efd24ec5e783bee7f23b5d7c941b0c12c 0	b.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;http://wanghengliang.cn/images/posts/git/git_summary_add_to_index.gif&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;提交到git仓库，当执行&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git commit&lt;/code&gt;命令时：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Git首先根据当前的索引生产一个tree object，充当新提交的一个快照。&lt;/li&gt;
  &lt;li&gt;创建一个新的commit object，将这次commit的信息储存起来，并且parent指向上一个commit，组成一条链记录变更历史。&lt;/li&gt;
  &lt;li&gt;将master分支的指针移到新的commit结点。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;http://wanghengliang.cn/images/posts/git/git_summary_commit_to_git.gif&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;至此我们知道了Git的三个分区分别是什么以及他们的作用，以及历史链是怎么被建立起来的。&lt;strong&gt;基本上Git的大部分指令就是在操作这三个分区以及这条链。&lt;/strong&gt;可以尝试的思考一下git的各种命令，试一下你能不能够在上图将它们&lt;strong&gt;“可视化”&lt;/strong&gt;出来，这个很重要，建议尝试一下。&lt;/p&gt;

&lt;h3 id=&quot;git命令&quot;&gt;Git命令&lt;/h3&gt;

&lt;h3 id=&quot;git工具&quot;&gt;Git工具&lt;/h3&gt;

&lt;h3 id=&quot;git工作流&quot;&gt;Git工作流&lt;/h3&gt;

&lt;p&gt;####GitFlow简介&lt;/p&gt;

&lt;p&gt;GitFlow工作流定义了一个围绕项目发布的严格分支模型，它为不同的分支分配了明确的角色，并定义分支之间何时以及如何进行交互。&lt;/p&gt;

&lt;h5 id=&quot;分支说明&quot;&gt;分支说明&lt;/h5&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;master&lt;/code&gt;分支：存储正式发布的产品，master分支上的产品要求随时处于&lt;strong&gt;可部署状态&lt;/strong&gt;。master分支只能通过与其他分支合并来更新内容，禁止直接在master分支进行修改。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;develop&lt;/code&gt;分支：汇总开发者完成的工作成果，develop分支上的产品可以是缺失功能模块的半成品，但是已有的功能模块不能是半成品。develop分支只能通过与其他分支合并来更新内容，禁止直接在develop分支进行修改。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;feature&lt;/code&gt;分支：当要开发新功能或者试验新功能时，从develop分支创建一个新的feature分支，并在feature分支上进行开发。开发完成后，需要将该feature分支合并到develop分支，最后删除该feature分支。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;release&lt;/code&gt;分支：当develop分支上的项目准备发布时，从develop分支上创建一个新的release分支，新建的release分支只能进行质量测试、bug修复、文档生成等面向发布的任务，不能再添加功能。这一系列发布任务完成后，需要将release分支合并到master分支上，并根据版本号为master分支添加tag，然后将release分支创建以来的修改合并回develop分支，最后删除release分支。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hotfix&lt;/code&gt;分支：当master分支中的产品出现需要立即修复的bug时，从master分支上创建一个新的hotfix分支，并在hotfix分支上进行bug修复。修复完成后，需要将hotfix分支合并到master分支和develop分支，并为master分支添加新的版本号tag，最后删除hotfix分支。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;http://wanghengliang.cn/images/posts/git/git_summary_gitflow.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;分支命名规范&quot;&gt;分支命名规范&lt;/h5&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;master&lt;/code&gt;分支：master分支只有一个，名称即为master。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;develop&lt;/code&gt;分支：develop分支只有一个，名称即为develop。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;feature&lt;/code&gt;分支：feature_&lt;版本号&gt;_&lt;功能名&gt;，例如：feature_v1.0.0_login。&lt;/功能名&gt;&lt;/版本号&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;release&lt;/code&gt;分支：release_&lt;版本号&gt;，例如：release_v1.0.0。&lt;/版本号&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hotfix&lt;/code&gt;分支：hotfix_&lt;版本号&gt;_&lt;问题简述&gt;，例如：hotfix_v1.0.0_username_not_support_chinese。&lt;/问题简述&gt;&lt;/版本号&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;说明：使用尖括号（&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;&amp;gt;&lt;/code&gt;）括起的内容是需要根据情景进行替换的内容，下同。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&quot;提交信息规范&quot;&gt;提交信息规范&lt;/h5&gt;

&lt;p&gt;提交信息应该描述“做了什么”和“这么做的原因”，必要时还可以加上“造成的影响”，主要由3个部分组成：&lt;strong&gt;Header&lt;/strong&gt;、&lt;strong&gt;Body&lt;/strong&gt;和&lt;strong&gt;Footer&lt;/strong&gt;。提交信息的第一行会被最为Header，其余行会被作为Body（Footer以特定关键字标识）。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Header&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Header部分只有1行，格式为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;type&amp;gt;(&amp;lt;scope&amp;gt;): &amp;lt;subject&amp;gt;&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;type&lt;/strong&gt;用于说明提交的类型，共有8个候选值：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;feat：新功能（feature）&lt;/li&gt;
  &lt;li&gt;fix：问题修复&lt;/li&gt;
  &lt;li&gt;docs：文档&lt;/li&gt;
  &lt;li&gt;style：调整格式（不影响代码运行）&lt;/li&gt;
  &lt;li&gt;refactor：重构&lt;/li&gt;
  &lt;li&gt;test：增加测试&lt;/li&gt;
  &lt;li&gt;chore：构建过程或辅助工具的变动&lt;/li&gt;
  &lt;li&gt;revert：撤销以前的提交&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;scope&lt;/strong&gt;用于说明提交的影响范围，内容根据具体项目而定。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;subject&lt;/strong&gt;用于概括提交内容。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Body&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Body部分是对本次提交的详细描述，可以分成多行。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Footer&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Footer部分只用于两种情况：&lt;strong&gt;不兼容变动&lt;/strong&gt;和&lt;strong&gt;关闭issue&lt;/strong&gt;。如果本次提交的代码与上一版本不兼容，则Footer部分要以&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BREAKING CHANGE&lt;/code&gt;开头，后面添加&lt;strong&gt;对变动的描述&lt;/strong&gt;、&lt;strong&gt;变动理由&lt;/strong&gt;和&lt;strong&gt;迁移方法&lt;/strong&gt;。如果本次解决了某个issue，那么可以在Footer部分关闭这个issue，格式为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Closes #&amp;lt;issus编号&amp;gt;&lt;/code&gt;，也可以一次关闭多个issue，多个issue之间使用半角逗号分隔。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;说明：revert与其他的提交类型略有不同。
revert的Header中没有scope和subject部分，其格式为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;revert: &amp;lt;被撤销的提交的Header&amp;gt;&lt;/code&gt;；
revert的Body部分格式也是固定的，需要写成&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;This reverts commit &amp;lt;被撤销的提交的Hash标识码&amp;gt;.&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&quot;注意事项&quot;&gt;注意事项&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;开始工作前一定要保证选择了正确的分支。&lt;/li&gt;
  &lt;li&gt;开始工作前定义好要做的事情，这将有助于确定从哪个分支开始工作和确定新分支的名称。&lt;/li&gt;
  &lt;li&gt;工单需要包含的内容：
    &lt;ul&gt;
      &lt;li&gt;问题：大致描述要解决的问题&lt;/li&gt;
      &lt;li&gt;原因：为什么要这样做&lt;/li&gt;
      &lt;li&gt;测试：如何验证问题已得到解决&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Git应该是一个用于&lt;strong&gt;记录结果&lt;/strong&gt;而不是&lt;strong&gt;保存工作&lt;/strong&gt;的工具。这意味着，应该在完成了一个功能模块时才进行提交，而不是每做一点改动就立即提交。过于密集的提交将会使重要的信息分散在大量无意义的信息中，增加管理的难度。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;参考资料&quot;&gt;参考资料&lt;/h3&gt;

&lt;p&gt;《Git版本控制管理 第二版》人民邮电出版社&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/UQKrAR3zsdTRz8nFiLk2uQ&quot;&gt;这才是真正的Git——Git内部原理揭秘！&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://marklodato.github.io/visual-git-guide/index-zh-cn.html&quot;&gt;图解Git&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/qq_21397217/article/details/90080766&quot;&gt;GitFlow简介&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Mon, 13 Apr 2020 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2020/04/git_summary/</link>
        <guid isPermaLink="true">http://localhost:4000/2020/04/git_summary/</guid>
        
        <category>git</category>
        
        
        <category>git</category>
        
      </item>
    
      <item>
        <title>GC调优之工具篇</title>
        <description>&lt;p&gt;GC调优之工具篇&lt;/p&gt;
</description>
        <pubDate>Mon, 23 Mar 2020 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2020/03/gc-tuning-tool/</link>
        <guid isPermaLink="true">http://localhost:4000/2020/03/gc-tuning-tool/</guid>
        
        <category>jvm</category>
        
        
        <category>JVM</category>
        
      </item>
    
  </channel>
</rss>
